#------------------------------------------------------------------------------------
#  SusyNtuple
#
#  A RootCore package for common UCI SUSY analysis
#------------------------------------------------------------------------------------


# For useful information on using these packages, please consult the TWiki:
https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/UCISusyNtuples

# Link to code in SVN browser
https://svnweb.cern.ch/trac/atlasinst/browser/Institutes/UCIrvine/SUSYAnalysis/SusyNtuple

# To checkout the package trunk
svn co svn+ssh://svn.cern.ch/reps/atlasinst/Institutes/UCIrvine/SUSYAnalysis/SusyNtuple/trunk SusyNtuple

# Or the current recommended tag (get the latest tag from the TWiki)
svn co svn+ssh://svn.cern.ch/reps/atlasinst/Institutes/UCIrvine/SUSYAnalysis/SusyNtuple/tags/SusyNtuple-XX-YY-ZZ SusyNtuple

# To make a tag, use the script/makeTag.sh script (only for developers)
./scripts/makeTag.sh SusyNtuple-XX-YY-ZZ "Some message"



# Note that if you are not planning on producing SusyNt files, you do not need to check out SusyCommon or the MultiLep package.
# This package does still depend on SUSYTools, however. So, to install the minimal required setup use the install script.
# This will checkout SUSYTools and run the install script from there.
# It is recommended that you do this installation in a clean workarea.
source SusyNtuple/scripts/install.sh

# If you plan to produce SusyNt or just want to have the whole machinery available to look at, then check out
# the SusyCommon package and use the install instructions from there. In that case, this package will be checked out automatically

# for examples of how to utilize this package, you can see the example cutflow codes below,
# or here is my analysis code which depends on this package
https://svnweb.cern.ch/trac/atlasinst/browser/Institutes/UCIrvine/sfarrell/SusyAna


#------------------------------------------------------------------------------------
# Examples on how to run
#------------------------------------------------------------------------------------

# We have include some example codes that demonstrate the usage of SusyNt and 
# can reproduce the 2L and 3L cutflows.
# It is recommended that you write your own analysis loopers which inherit from SusyNtAna
# (or from the cutflow classes)

# Currently there are 3 executables.  They all have the same command line options.
# Specify SusyNt files either by specific file path, a fileList, or an input directory

# Executable for simple SusyNt testing
SusyNtTest

# Executables 2L and 3L cutflows
Susy2LepCF
Susy3LepCF

# If you run with option '-h' you will get the list of command line options
  Options:
  -n number of events to process
     defaults: -1 (all events)
  -k number of events to skip
     defaults: 0
  -d debug printout level
     defaults: 0 (quiet) 
  -F name of single input file
     defaults: ''
  -f name of input filelist
     defaults: ''
  -D name of input file dir
     defaults: ''
  -s sample name, for naming files
     defaults: ntuple sample name
  -h print this help



#------------------------------------------------------------------------------------
# Overview of the package
#------------------------------------------------------------------------------------

SusyDefs
  - typedefs, constants, global functions, etc.

SusyNt
  - Definitions for the SusyNt classes: particles, jets, event variables, etc.

SusyNtObject
  - Manages SusyNt read/write of branches

SusyNtTools
  - Class with low-level functions for applying selections on SusyNt files

SusyNtAna
  - Analysis looper class, inherits from TSelector, used to process the SusyNt
  - Also inherits from SusyNtTools and allows to easily select all baseline and signal objects
